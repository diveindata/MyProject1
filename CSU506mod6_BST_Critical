class TreeNode:
    def __init__(self, data):
        self.left = None   # left child as None
        self.right = None  # right child as None
        self.data = data  # node with the given data

class Tree:
    def __init__(self, data_array):
        self.root = self.build_tree(sorted(set(data_array)))  # Build the tree from the sorted unique data array

    def build_tree(self, data):
        if not data:
          return None
        index = len(data) // 2  # Find the middle index of the data array
        root = TreeNode(data[index])  # Create a node with the middle value as the root
        root.left = self.build_tree(data[:index])  # to the left subtree before the root
        root.right = self.build_tree(data[index+1:])  # jto the right subtree after the root

        return root  # Return to root node

    def add(self, data):
        self.root = self.insert(self.root, data)  # Insert a new data into the tree

    def insert(self, root, data):
        if root is None:
            return TreeNode(data)  # If the root is None, create a new node with the given value

        if data < root.data:
            root.left = self.insert(root.left, data)  # insert to the left subtree
        elif data > root.data:
            root.right = self.insert(root.right, data)  # insert to the right subtree

        return root  # Return the modified root

    def remove(self, value):
        self.root = self._delete(self.root, value)  # Delete a node with the given valeu

    def delete(self, root, data):
        if data < root.data: # if the give data is less than the root node
            root.left = self.delete(root.left, data)  #  delete from the left subtree
        elif data > root.data:
            root.right = self.delete(root.right, data)  #  delete from the right subtree
        else:
            if root.left is None:
                return root.right  # If the node has no left child, return its right child
            elif root.right is None:
                return root.left  # If the node has no right child, return its left child

    def inorder_traversal(self, root):
        inorder = []  # empty list to store the inorder traversal
        if root:
            inorder = self.inorder_traversal(root.left)  # Go as far left as possible
            inorder.append(root.data)  # append the root node
            inorder += self.inorder_traversal(root.right)  # at the end of left child, go to the right child
        return inorder  # Return the inorder traversal result

data = [1, 7, 4, 23, 8, 9, 4, 3, 5, 7, 9, 67, 6345, 324]  # GIven data array
binary_tree = Tree(data)  # Create a binary search tree with the data array

# Print the in-order traversal of the tree
print(binary_tree.inorder_traversal(binary_tree.root))

# Add a new node
binary_tree.add(6)

# Print the tree after adding new node
print(f" Insert a new node tree: ",binary_tree.inorder_traversal(binary_tree.root))
